# Install packages
install.packages("dplyr")
install.packages("gapminder")
# Load the gapminder package
library(gapminder)
# Load the dplyr package
library(dplyr)
# Look at the gapminder dataset
gapminder
gapminder %>%
filter(year == 2007)
gapminder %>%
filter(year == 2007)
gapminder %>%
filter(year == 2007 & country == "United States")
gapminder %>%
filter(year == 2007, country == "United States")
gapminder %>%
filter(year == 1957)
# Filter for China in 2002
gapminder %>%
filter(year == 2002, country == "China")
#
gapminder %>%
arrange(gdpPercap)
# descending
gapminder %>%
arrange(desc(gdpPercap))
gapminder %>%
filter(year == 2007) %>%
arrange(desc(gdpPercap))
gapminder |>
mutate(pop = pop/100000)
gapminder |>
mutate(gdp = gdpPercap * pop)
# Filter, mutate, and arrange the gapminder dataset
gapminder |>
filter(year == 2007) |>
mutate(lifeExpMonths = lifeExp * 12) |>
arrage(desc(lifeExpMonths))
gapminder |>
filter(year == 2007) |>
mutate(lifeExpMonths = lifeExp * 12) |>
arrange(desc(lifeExpMonths))
install.packages("ggplot2")
library(ggplot2)
library(gapminder)
library(dplyr)
library(gapminder)
library(ggplot2)
library(dplyr)
gapminder_1952 <- gapminder %>%
filter(year == 1952)
# Plot pop on the x-axis and gdpPercap on the y-axis
ggplot(gapminder_1952, aes(x = pop, y = gdpPercap)) +
geom_point()
# Create a scatter plot with pop on the x-axis and lifeExp on the y-axis
ggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +
geom_point()
# Change this plot to put the x-axis on a log scale
ggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +
geom_point() +
scale_x_log10()
# Scatter plot comparing pop and gdpPercap, with both axes on a log scale
ggplot(gapminder_1952, aes(x = pop, x= gdpPercap)) +
geom_point() +
scale_x_log10() +
scale_y_log10()
ggplot(gapminder_1952, aes(x = pop, y= gdpPercap)) +
geom_point() +
scale_x_log10() +
scale_y_log10()
# Change this plot to put the x-axis on a log scale
ggplot(gapminder_1952, aes(x = pop, y = lifeExp, color = continent)) +
geom_point() +
scale_x_log10()
# Change this plot to put the x-axis on a log scale
ggplot(gapminder_1952, aes(x = pop, y = lifeExp, color = continent, size = pop)) +
geom_point() +
scale_x_log10()
# Add the size aesthetic to represent a country's gdpPercap
ggplot(gapminder_1952, aes(x = pop, y = lifeExp, color = continent, size = gdpPercap)) +
geom_point() +
scale_x_log10() +
facet_wrap(~ continent)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +
geom_point() +
scale_x_log10() +
facet_wrap(~ year)
# Load the ggplot2 package as well
library(gapminder)
library(ggplot2)
library(dplyr)
gapminder |>
summarize(meanLifeExp = mean(lifeExp))
gapminder |>
filter(year == 2007) |>
summarize(meanLifeExp = mean(lifeExp),
totalPop = sum(pop))
gapminder |>
summarize(meanLifeExp = mean(lifeExp))
gapminder %>%
group_by(year) %>%
summarize(medianLifeExp = median(lifeExp),
maxGdpPercap = max(gdpPercap))
# Load the ggplot2 package as well
library(gapminder)
library(ggplot2)
library(dplyr)
# Summarize the median GDP and median life expectancy per continent in 2007
by_continent_2007 <-
gapminder %>%
group_by(continent) %>%
filter(year == 2007) %>%
summarize(medianLifeExp = median(lifeExp), medianGdpPercap= median(gdpPercap))
by_continent_2007
# Load the ggplot2 package as well
library(gapminder)
library(ggplot2)
library(dplyr)
# Summarize the median GDP and median life expectancy per continent in 2007
by_continent_2007 <-
gapminder %>%
group_by(continent) %>%
filter(year == 2007) %>%
summarize(medianLifeExp = median(lifeExp), medianGdpPercap= median(gdpPercap))
# Use a scatter plot to compare the median GDP and median life expectancy
ggplot(by_continent_2007, aes(x= medianGdpPercap, y=medianLifeExp, color=continent)) +
geom_line() +
expand_limits(y = 0)
# Use a scatter plot to compare the median GDP and median life expectancy
ggplot(by_continent_2007, aes(x= year, y=medianLifeExp, color=continent)) +
geom_line() +
expand_limits(y = 0)
# Summarize the median GDP and median life expectancy per continent in 2007
by_continent_2007 <-
gapminder %>%
group_by(year,continent) %>%
summarize(medianLifeExp = median(lifeExp), medianGdpPercap= median(gdpPercap))
# Use a scatter plot to compare the median GDP and median life expectancy
ggplot(by_continent_2007, aes(x= year, y=medianLifeExp, color=continent)) +
geom_line() +
expand_limits(y = 0)
# Summarize the median gdpPercap by year, then save it as by_year
by_year <-
gapminder %>%
group_by(year) %>%
summarize(medianGdpPercap = median(gdpPercap))
# Create a line plot showing the change in medianGdpPercap over time
ggplot(by_year, aes(x = year, y = medianGdpPercap)) +
geom_line() +
expand_limits(y = 0)
install.packages("Boruta")
install.packages("DMwR2" )
install.packages("EnvStats")
install.packages("GGally")
install.packages("HSAUR")
install.packages("MASS")
install.packages("RColorBrewer")
install.packages("Rcpp")
install.packages("TH.data")
install.packages("TSP")
install.packages("VIM")
install.packages("av")
install.packages("circlize")
install.packages("colorblindr")
install.packages("colorspace")
install.packages("colourpicker")
install.packages("discretization")
install.packages("easypackages")
install.packages("extrafont")
install.packages("finalfit")
install.packages("fmsb")
install.packages("forcats")
install.packages("funModeling")
install.packages("fuzzyjoin")
install.packages("gapminder")
install.packages("geomtextpath")
install.packages("ggDoubleHeat")
install.packages("ggalluvial")
install.packages("gganimate")
install.packages("ggbraid")
install.packages("ggbreak")
install.packages("ggcorrplot")
install.packages("ggforce")
install.packages("ggmice")
install.packages("ggparallel")
install.packages("ggpol")
install.packages("ggpubr")
install.packages("ggrepel")
install.packages("ggridges")
install.packages("ggtext")
install.packages("ggthemes")
install.packages("gifski")
install.packages("hexbin")
install.packages("infotheo")
install.packages("infotheo")
install.packages("installr" )
install.packages("jcolors")
install.packages("latticeExtra")
install.packages("lubridate")
install.packages("maps")
install.packages("maps")
install.packages("maptools")
install.packages("mice")
install.packages("naniar" )
install.packages("openintro" )
install.packages("outliers")
install.packages("pedigreeTools")
install.packages("readxl")
install.packages("regclass")
install.packages("rgdal")
install.packages("scales")
install.packages("sf")
install.packages("stringdist")
install.packages("stringi")
install.packages("stringr")
install.packages("tidyverse")
install.packages("transformr")
install.packages("vcd")
install.packages("viridis")
install.packages("xlsx")
install.packages("zoo")
install.packages('arules')
install.packages('dplyr')
install.packages('ragg')
install.packages('systemfonts')
install.packages('textshaping')
install.packages('visdat')
cls
library(gapminder)
library(ggplot2)
library(dplyr)
# Summarize the median GDP and median life expectancy per continent in 2007
by_continent_2007 <-
gapminder %>%
group_by(year,continent) %>%
summarize(medianLifeExp = median(lifeExp), medianGdpPercap= median(gdpPercap))
# Use a scatter plot to compare the median GDP and median life expectancy
ggplot(by_continent_2007, aes(x= year, y=medianLifeExp, color=continent)) +
geom_line() +
expand_limits(y = 0)
# Load the ggplot2 package as well
library(gapminder)
library(ggplot2)
library(dplyr)
gapminder |>
summarize(meanLifeExp = median(lifeExp))
gapminder %>%
filter(year == 1957) %>%
summarize(medianLifeExp = median(lifeExp))
# Load the ggplot2 package as well
library(gapminder)
library(ggplot2)
library(dplyr)
gapminder
gapminder |>
summarize(meanLifeExp = median(lifeExp))
by_year <- gapminder %>%
group_by(year) %>%
summarize(medianLifeExp = median(lifeExp),
maxGdpPercap = max(gdpPercap))
ggplot(by_year, aes( x = year, y = medianLifeExp)) +
geom_point() +
expand_limits(y = 0)
install.packages("tidyverse")
install.packages('installr')
install.packages("installr")
install.packages(c("brew", "cli", "cluster", "crayon", "curl", "evaluate", "foreign", "isoband", "jsonlite", "lifecycle", "lintr", "nlme", "nnet", "openssl", "purrr", "readr", "rlang", "survival", "timeDate", "tinytex", "vctrs", "vroom", "xfun"))
install.packages(c("brew", "cli", "cluster", "crayon", "curl", "evaluate", "foreign", "isoband", "jsonlite", "lifecycle", "lintr", "nlme", "nnet", "openssl", "purrr", "readr", "rlang", "survival", "timeDate", "tinytex", "vctrs", "vroom", "xfun"))
install.packages(c("brew", "cli", "cluster", "crayon", "curl", "evaluate", "foreign", "isoband", "jsonlite", "lifecycle", "lintr", "nlme", "nnet", "openssl", "purrr", "readr", "rlang", "survival", "timeDate", "tinytex", "vctrs", "vroom", "xfun"))
install.packages(c("brew", "cli", "cluster", "crayon", "curl", "evaluate", "foreign", "isoband", "jsonlite", "lifecycle", "lintr", "nlme", "nnet", "openssl", "purrr", "readr", "rlang", "survival", "timeDate", "tinytex", "vctrs", "vroom", "xfun"))
install.packages(c("brew", "cli", "cluster", "crayon", "curl", "evaluate", "foreign", "isoband", "jsonlite", "lifecycle", "lintr", "nlme", "nnet", "openssl", "purrr", "readr", "rlang", "survival", "timeDate", "tinytex", "vctrs", "vroom", "xfun"))
install.packages(c("brew", "cli", "cluster", "crayon", "curl", "evaluate", "foreign", "isoband", "jsonlite", "lifecycle", "lintr", "nlme", "nnet", "openssl", "purrr", "readr", "rlang", "survival", "timeDate", "tinytex", "vctrs", "vroom", "xfun"))
install.packages(c("brew", "cli", "cluster", "crayon", "curl", "evaluate", "foreign", "isoband", "jsonlite", "lifecycle", "lintr", "nlme", "nnet", "openssl", "purrr", "readr", "rlang", "survival", "timeDate", "tinytex", "vctrs", "vroom", "xfun"))
install.packages(c("brew", "cli", "cluster", "crayon", "curl", "evaluate", "foreign", "isoband", "jsonlite", "lifecycle", "lintr", "nlme", "nnet", "openssl", "purrr", "readr", "rlang", "survival", "timeDate", "tinytex", "vctrs", "vroom", "xfun"))
3+3
a <- 'jose'
a
b <- 34
is.integer(b)
is.numeric(b)
Sys.Date()
Sys.timezone()
Sys.time()
ve <- seq(from=10, to= 30, step(2))
ve <- seq(from=10, to= 30, step=2)
ve <- seq(from=10, to= 30, by=2)
ve
library(tidyverse)
read.csv('./datasets/sample_dataset.csv')
pwd
read.csv('/datasets/sample_dataset.csv')
pwd
load("~/Documents/Masters/1S/VPD/datasets/sample_dataset.csv")
read.csv('/datasets/sample_dataset.csv')
read.csv(file = '/datasets/sample_dataset.csv')
wdir
getwd()
getwd()
setwd("~/Documents/Masters/1S/VPD")
read.csv(file = '/datasets/sample_dataset.csv')
getwd()
ls
read.csv(file = './datasets/sample_dataset.csv')
sample <-
read.csv(file = './datasets/sample_dataset.csv')
head(sample)
sample |>
filter(Gender == 'Female')
sample |>
filter(Gender == 'Female')
head(sample)
sample |>
filter(Gender == 'Female')
sample |>
filter(Age > 12)
sample %>%
filter(Age > 12)
sample <-
read.csv(file = './datasets/sample_dataset.csv')
head(sample)
sample %>% filter(Smoking == 'No')
xpto <-
read.csv(file = './datasets/sample_dataset.csv')
head(xpto)
xpto %>% filter(Smoking == 'No')
xpto %>% filter(Age >= 35)
xpto %>% groupby(Gender)
xpto %>% group_by(Gender)
xpto %>%
group_by(gender)
xpto %>%
group_by(Gender)
library(tidyverse)
library(ggplot2)
library(dplyr)
xpto <-
read.csv(file = './datasets/sample_dataset.csv')
head(xpto)
xpto %>%
group_by(Gender)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
xpto <-
read.csv(file = './datasets/sample_dataset.csv')
head(xpto)
xpto %>%
group_by(Gender)
library(tidyverse)
xpto <-
read.csv(file = './datasets/sample_dataset.csv')
head(xpto)
xpto %>%
group_by(Gender)
library(tidyverse)
# a vector of nominal variables
status <- c( "Lo" , "Hi" , "Med" , "Med" , "Hi" )
# convert to a factor
status <- factor(status)
status ## check its value
# convert to an ordered factor
o.status <- factor( status , levels = c( "Lo" , "Med" , "Hi" ) , ordered = TRUE )
# compare the output of the following
status [ order ( status ) ]
o.status [ order ( o.status ) ]
library(tidyverse)
# a sample dataset from:
# https://opendata.socrata.com/Government/Member-Travel-Detail-For-Expense-Checks-Dated-Octo/ce9a-8jva
#library( readxl ) ; library ( dplyr )
expenses <-
read_xlsx( './datasets/Member_Travel_Expenses.xlsx')
library(tidyverse)
library(readxl)
library(dplyr)
expenses <-
read_xlsx( './datasets/Member_Travel_Expenses.xlsx')
expenses <-
mutate (expenses , Destination = as.factor(Destination ) , Purpose = as.factor(Purpose))
exp_num <-
select_if (expenses , is.numeric )
expenses
exp_num
library( infotheo ) ## a useful package
a <- c(13, 15, 16, 16, 19, 20, 21, 22, 22, 25, 30, 33, 35, 35, 36, 40, 45)
x1 <- discretize( a , disc = "equalwidth" , nbins = 4)
x2 <- discretize( a , disc = "equalfreq" , nbins = 4)
identical ( x1 , x2 )
x1
x2
ibrary(tidyverse)
library(tidyverse)
library(readxl)
library(dplyr)
library( infotheo ) ## a useful package
library(readr)
library( ggplot2 )
library( arules ) # a package that also has a discretize function
bank <- read_delim( ".datasets/bank_data_short.csv", delim=";" , col_names = TRUE )
bank <- read_delim( "./datasets/bank_data_short.csv", delim=";" , col_names = TRUE )
# equal width and equal frequency
discretize( bank$age, disc = "interval" , breaks = 3 )
discretize( bank$age, disc = "frequency" , breaks = 3 )
# add column with discretized value to the dataframe
bank$age_bin_ew <- as.vector ( discretize( bank$age, disc="interval", nbins=3 ) )
## scatter
ggplot( data = bank, aes( x=age, y=income )) + geom_point()
## boxplots
ggplot(data=bank, aes(x=age_bin_ew, y = income )) + geom_boxplot()
library(tidyverse)
library(readxl)
library(dplyr)
library( infotheo ) ## a useful package
library(readr)
library( ggplot2 )
library( arules ) # a package that also has a discretize function
library(discretization)
ds <- read_delim( "./datasets/chi_squared.csv" , delim = ";" , col_names = TRUE)
chiM( data.frame( ds ) , alpha = 0.1 )
x1
x2
library(tidyverse)
library(readxl)
library(infotheo) ## a useful package
library(arules) # a package that also has a discretize function
library(discretization)
# Nominal and ordinal data in R
expenses <-
read_xlsx( './datasets/Member_Travel_Expenses.xlsx')
expenses <-
mutate (expenses , Destination = as.factor(Destination) , Purpose = as.factor(Purpose))
exp_num <-
select_if (expenses , is.numeric)
pairs(exp_num)
a <- c(13, 15, 16, 16, 19, 20, 21, 22, 22, 25, 30, 33, 35, 35, 36, 40, 45)
x1 <- discretize( a , disc = "equalwidth" , nbins = 4)
x2 <- discretize( a , disc = "equalfreq" , nbins = 4)
identical(x1 , x2)
# Load dataset
bank <- read_delim("./datasets/bank_data_short.csv", delim=";" , col_names = TRUE)
# equal width and equal frequency
discretize( bank$age, disc = "interval" , breaks = 3 )
discretize( bank$age, disc = "frequency" , breaks = 3 )
# add column with discretized value to the dataframe
bank$age_bin_ew <- as.vector ( discretize( bank$age, disc="interval", nbins=3 ) )
## scatter
ggplot(data = bank, aes(x=age, y=income)) +
geom_point()
## boxplots
ggplot(data=bank, aes(x=age_bin_ew, y = income )) +
geom_boxplot()
# chiMerge in R
ds <- read_delim("./datasets/chi_squared.csv" , delim = ";" , col_names = TRUE)
chiM(data.frame(ds) , alpha = 0.1)
library(funModeling)
## gain ratio discretization
discretize_rgr( bank$age, bank$pep)
install.packages( 'stringdist' )
library (stringdist)
stringdist( "vintner" , "writers" )
stringdist( "Jose", "Joaquim" )
stringdist( "kitten", "sitting" )
library(fuzzyjoin)
organization <- c("John Doe Inc", "Saint Rogers", "Sally Harper Center")
sales <- c(300,400,500)
ds_sales <- data.frame(organization, sales)
organization <- c("Sally Harper Cntr", "John Doe Incorporated", "St. Rogers")
num_cust <- c(10, 50, 100)
ds_cust <- data.frame(organization, num_cust)
stringdist_inner_join( ds_sales , ds_cust, by = c('organization' = 'organization'), max_dist = 5)
ds_cust
ds_sales
stringdist_left_join( ds_sales , ds_cust, by = c('organization' = 'organization'), max_dist = 5)
